// This file is auto-generated by @hey-api/openapi-ts

export const $ArtistInfoInLecture = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        is_artist: {
            type: 'boolean',
            title: 'Is Artist'
        }
    },
    type: 'object',
    required: ['id', 'nickname', 'is_artist'],
    title: 'ArtistInfoInLecture'
} as const;

export const $Body_auth_redis_login_user_auth_login_post = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth_redis_login_user_auth_login_post'
} as const;

export const $Body_reset_forgot_password_user_auth_forgot_password_post = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_reset_forgot_password_user_auth_forgot_password_post'
} as const;

export const $Body_reset_reset_password_user_auth_reset_password_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['token', 'password'],
    title: 'Body_reset_reset_password_user_auth_reset_password_post'
} as const;

export const $CreateLectureBody = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description',
            default: '새로운 강의'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'CreateLectureBody'
} as const;

export const $CreateLectureResponseSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/LectureDetail'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'CreateLectureResponseSchema'
} as const;

export const $ErrorModel = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorModel'
} as const;

export const $FetchRecommendedLecuturesSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/LectureList'
            },
            type: 'array',
            title: 'Data'
        },
        meta: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    },
    type: 'object',
    required: ['data', 'meta'],
    title: 'FetchRecommendedLecuturesSchema'
} as const;

export const $GetArtistsResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserArtistInfo'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'GetArtistsResponse'
} as const;

export const $GetLectureSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/LectureDetail'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'GetLectureSchema'
} as const;

export const $HTTPValidationError = {
    properties: {
        errors: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Errors'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $LectureDetail = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        artist: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtistInfoInLecture'
                },
                {
                    type: 'null'
                }
            ]
        },
        lessons: {
            items: {
                '$ref': '#/components/schemas/LessonInLecture'
            },
            type: 'array',
            title: 'Lessons'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        length_sec: {
            type: 'integer',
            title: 'Length Sec'
        },
        time_created: {
            type: 'string',
            format: 'date-time',
            title: 'Time Created'
        },
        time_updated: {
            type: 'string',
            format: 'date-time',
            title: 'Time Updated'
        }
    },
    type: 'object',
    required: ['id', 'title', 'artist', 'lessons', 'description', 'length_sec', 'time_created', 'time_updated'],
    title: 'LectureDetail'
} as const;

export const $LectureList = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        length_sec: {
            type: 'integer',
            title: 'Length Sec'
        },
        lecture_count: {
            type: 'integer',
            title: 'Lecture Count'
        },
        time_created: {
            type: 'string',
            format: 'date-time',
            title: 'Time Created'
        },
        time_updated: {
            type: 'string',
            format: 'date-time',
            title: 'Time Updated'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'length_sec', 'lecture_count', 'time_created', 'time_updated'],
    title: 'LectureList'
} as const;

export const $LessonInLecture = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        length_sec: {
            type: 'integer',
            title: 'Length Sec'
        },
        lecture_ordering: {
            type: 'integer',
            title: 'Lecture Ordering'
        },
        time_created: {
            type: 'string',
            format: 'date-time',
            title: 'Time Created'
        },
        time_updated: {
            type: 'string',
            format: 'date-time',
            title: 'Time Updated'
        }
    },
    type: 'object',
    required: ['id', 'title', 'length_sec', 'lecture_ordering', 'time_created', 'time_updated'],
    title: 'LessonInLecture'
} as const;

export const $OAuth2AuthorizeResponse = {
    properties: {
        authorization_url: {
            type: 'string',
            title: 'Authorization Url'
        }
    },
    type: 'object',
    required: ['authorization_url'],
    title: 'OAuth2AuthorizeResponse'
} as const;

export const $PaginationMeta = {
    properties: {
        total_items: {
            type: 'integer',
            title: 'Total Items'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        },
        curr_page: {
            type: 'integer',
            title: 'Curr Page'
        },
        per_page: {
            type: 'integer',
            title: 'Per Page'
        }
    },
    type: 'object',
    required: ['total_items', 'total_pages', 'curr_page', 'per_page'],
    title: 'PaginationMeta'
} as const;

export const $UserArtistInfo = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        time_created: {
            type: 'string',
            format: 'date-time',
            title: 'Time Created'
        },
        lectures: {
            items: {
                '$ref': '#/components/schemas/LectureList'
            },
            type: 'array',
            title: 'Lectures'
        }
    },
    type: 'object',
    required: ['id', 'nickname', 'time_created', 'lectures'],
    title: 'UserArtistInfo'
} as const;

export const $UserRead = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        is_artist: {
            type: 'boolean',
            title: 'Is Artist'
        }
    },
    type: 'object',
    required: ['id', 'email', 'is_superuser', 'nickname', 'is_artist'],
    title: 'UserRead'
} as const;

export const $UserUpdate = {
    properties: {
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        }
    },
    type: 'object',
    required: ['nickname'],
    title: 'UserUpdate'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;